// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model User {
    id                String        @id @default(cuid())
    name              String
    email             String        @unique
    class             Class?        @relation(fields: [classId], references: [id])
    classId           String?
    createdAt         DateTime      @default(now())
    updatedAt         DateTime      @updatedAt
    progress          Progress[]
    active_assigments Assignments[]
    accounts          Account[]
}

model Class {
    id          String        @id @default(cuid())
    name        String
    users       User[]
    assignments Assignments[]
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
}

model Assignments {
    id       String     @id @default(cuid())
    name     String
    class    Class      @relation(fields: [class_id], references: [id])
    class_id String
    users    User[]
    progress Progress[]
}

model Progress {
    id           String      @id @default(cuid())
    user         User        @relation(fields: [user_id], references: [id])
    user_id      String      @unique
    assignment   Assignments @relation(fields: [assignmentId], references: [id])
    assignmentId String
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
