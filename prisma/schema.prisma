// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(cuid())
  name              String
  email             String        @unique
  emailVerified     DateTime?     @map("email_verified")
  image             String?
  class             Class?        @relation(fields: [classId], references: [id])
  classId           String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  progress          Progress[]
  active_assigments Assignments[]
  accounts          Account[]
  saved             Saved[]
  Session           Session[]
}

model Class {
  id          String        @id @default(cuid())
  name        String
  users       User[]
  assignments Assignments[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Assignments {
  id       String     @id @default(cuid())
  name     String
  class    Class      @relation(fields: [class_id], references: [id])
  class_id String
  users    User[]
  progress Progress[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Progress {
  id           String      @id @default(cuid())
  user         User        @relation(fields: [user_id], references: [id])
  user_id      String      @unique
  assignment   Assignments @relation(fields: [assignmentId], references: [id])
  assignmentId String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Saved {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  reel   Reel   @relation(fields: [reelId], references: [id])
  reelId String
}

model Reel {
  id        String   @id @default(cuid())
  subreddit String
  title     String
  content   String
  username  String
  createdAt DateTime @default(now())
  saved     Saved[]
}
